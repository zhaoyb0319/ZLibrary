package cn.zhaoyb.zlibrary.bitmap;import java.io.InputStream;import cn.zhaoyb.zlibrary.utils.FileUtils;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Rect;/** *  * Bitmap生成管理类(处理了OOM的情况) *  * @author zhaoyb (http://www.zhaoyb.cn) * */public class BitmapCreate {    /**     * 获取一个指定大小的bitmap     * 通过JNI的形式读取本地图片达到节省内存的目的     *      * @param res Resources     * @param resId 图片ID     * @param reqWidth 目标宽度     * @param reqHeight 目标高度     */    public static Bitmap bitmapFromResource(Resources res, int resId,            int reqWidth, int reqHeight) {        return bitmapFromStream(res.openRawResource(resId), null, reqWidth, reqHeight);    }    /**     * 获取一个指定大小的bitmap     *      * @param reqWidth 目标宽度     * @param reqHeight 目标高度     */    public static Bitmap bitmapFromFile(String pathName, int reqWidth,            int reqHeight) {        if (reqHeight == 0 || reqWidth == 0) {            try {                return BitmapFactory.decodeFile(pathName);            } catch (OutOfMemoryError e) {            }        }        // 通过options操作,来获取图片以免OOM        BitmapFactory.Options options = new BitmapFactory.Options();        options.inJustDecodeBounds = true;        BitmapFactory.decodeFile(pathName, options);        options = BitmapHelper.calculateInSampleSize(options, reqWidth,                reqHeight);        return BitmapFactory.decodeFile(pathName, options);    }    /**     * 获取一个指定大小的bitmap     *      * @param data Bitmap的byte数组     * @param offset image从byte数组创建的起始位置     * @param length the number of bytes, 从offset处开始的长度     * @param reqWidth 目标宽度     * @param reqHeight 目标高度     */    public static Bitmap bitmapFromByteArray(byte[] data, int offset,            int length, int reqWidth, int reqHeight) {        if (reqHeight == 0 || reqWidth == 0) {            try {                return BitmapFactory.decodeByteArray(data, offset, length);            } catch (OutOfMemoryError e) {            }        }        BitmapFactory.Options options = new BitmapFactory.Options();        options.inJustDecodeBounds = true;        options.inPurgeable = true;        BitmapFactory.decodeByteArray(data, offset, length, options);        options = BitmapHelper.calculateInSampleSize(options, reqWidth,                reqHeight);        return BitmapFactory.decodeByteArray(data, offset, length, options);    }    /**     * 获取一个指定大小的bitmap     * 实际调用的方法是bitmapFromByteArray(data, 0, data.length, w, h);     *      * @param is 从输入流中读取Bitmap     * @param reqWidth 目标宽度     * @param reqHeight 目标高度     */    public static Bitmap bitmapFromStream(InputStream is, int reqWidth,            int reqHeight) {        if (reqHeight == 0 || reqWidth == 0) {            try {                return BitmapFactory.decodeStream(is);            } catch (OutOfMemoryError e) {            }        }        byte[] data = FileUtils.input2byte(is);        return bitmapFromByteArray(data, 0, data.length, reqWidth, reqHeight);    }    /**     * 获取一个指定大小的bitmap     *      * @param is 从输入流中读取Bitmap     * @param outPadding  If not null, return the padding rect for the bitmap if it exists, otherwise set padding to [-1,-1,-1,-1]. If no bitmap is returned (null) then padding is unchanged.     * @param reqWidth 目标宽度     * @param reqHeight 目标高度     */    public static Bitmap bitmapFromStream(InputStream is, Rect outPadding,            int reqWidth, int reqHeight) {        Bitmap bmp = null;        if (reqHeight == 0 || reqWidth == 0) {            try {                return BitmapFactory.decodeStream(is);            } catch (OutOfMemoryError e) {            }        }        BitmapFactory.Options options = new BitmapFactory.Options();        options.inJustDecodeBounds = true;        options.inPurgeable = true;        BitmapFactory.decodeStream(is, outPadding, options);        options = BitmapHelper.calculateInSampleSize(options, reqWidth,                reqHeight);        bmp = BitmapFactory.decodeStream(is, outPadding, options);        return bmp;    }}